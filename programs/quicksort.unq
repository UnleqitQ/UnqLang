typedef int* data_t;

int part(data_t data, int start, int end) {
  int p = end;
  int pivot = data[p];
  int l = start;
  int r = end - 1;
  while (l < r) {
    while (l < r && data[l] < pivot) {
      ++l;
    }
    while (r > l && data[r] > pivot) {
      --r;
    }

    if (data[l] > data[r]) {
      int tmp = data[l];
      data[l] = data[r];
      data[r] = tmp;
    }
  }
  if (data[l] >= pivot) {
    data[p] = data[l];
    data[l] = pivot;
  }
  else {
    l = p;
  }
  return l;
}

void quicksort(data_t data, int start, int end) {
  if (start < end) {
    int split = part(data, start, end);
    quicksort(data, start, split - 1);
    quicksort(data, split + 1, end);
  }
  return;
}

void main() {
  int[10] data;
  data[0] = 5;
  data[1] = 3;
  data[2] = 6;
  data[3] = 2;
  data[4] = 1;
  data[5] = 9;
  data[6] = 8;
  data[7] = 0;
  data[8] = 4;
  data[9] = 7;

  data_t d = &data[0];

  quicksort(d, 0, 9);
  int i = 0;
  while (i < 10) {
    puti(i);
    putc(':');
    putc(' ');
    puti(data[i]);
    putc('\n');
    ++i;
  }
  return;
}
