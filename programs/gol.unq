struct gol {
  bool[10][10] board;
};
struct neighbors {
  char[10][10] count;
};

void print_neighbors(neighbors* n);

void print(char* s) {
  while (*s) {
    putc(*s);
    ++s;
  }
}

void count_neighbors(gol* g, neighbors* n) {
  int i = 0;
  int j;
  // Initialize counts to zero
  while (i < 10) {
    j = 0;
    while (j < 10) {
      n->count[i][j] = 0;
      ++j;
    }
    ++i;
  }
  i = 0;
  // Count neighbors for each cell
  while (i < 10) {
    j = 0;
    while (j < 10) {
      if (g->board[i][j]) {
        int di = -1;
        int dj;
        while (di <= 1) {
          dj = -1;
          while (dj <= 1) {
            if (di == 0 && dj == 0) {
              // Skip the cell itself
            }
            else {
              int ni = i + di;
              int nj = j + dj;
              if (ni >= 0 && ni < 10 && nj >= 0 && nj < 10) {
                ++(n->count[ni][nj]);
              }
            }
            ++dj;
          }
          ++di;
        }
      }
      ++j;
    }
    ++i;
  }
}

void update_board(gol* g, neighbors* n) {
  int i = 0;
  int j = 0;
  while (i < 10) {
    j = 0;
    while (j < 10) {
      if (g->board[i][j]) {
        if (n->count[i][j] < 2 || n->count[i][j] > 3) {
          g->board[i][j] = false;
        }
      }
      else {
        if (n->count[i][j] == 3) {
          g->board[i][j] = true;
        }
      }
      ++j;
    }
    ++i;
  }
}

void print_board(gol* g) {
  print("Current board:\n");
  if (!g) {
    print("Null board pointer!\n");
    return;
  }
  int i = 0;
  int j = 0;
  while (i < 10) {
    j = 0;
    while (j < 10) {
      if (g->board[i][j]) {
        putc('#');
      } else {
        putc('.');
      }
      ++j;
    }
    putc('\n');
    ++i;
  }
}
void print_neighbors(neighbors* n) {
  print("Neighbor counts:\n");
  int i = 0;
  int j = 0;
  while (i < 10) {
    j = 0;
    while (j < 10) {
      putc('0' + n->count[i][j]);
      ++j;
    }
    putc('\n');
    ++i;
  }
}

void step(gol* g) {
  neighbors n;
  count_neighbors(g, &n);
  // print_neighbors(&n);
  update_board(g, &n);
}

void main() {
  gol g;
  // Initialize a glider pattern
  g.board[1][2] = true;
  g.board[2][3] = true;
  g.board[3][1] = true;
  g.board[3][2] = true;
  g.board[3][3] = true;

  int generation = 0;
  while (generation < 20) {
    print_board(&g);
    putc('\n');
    step(&g);
    ++generation;
  }
}

