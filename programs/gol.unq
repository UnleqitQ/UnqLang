struct gol {
  bool[10][10] board;
};
struct neighbors {
  char[10][10] count;
};

void print_neighbors(neighbors* n);

void print(char* s) {
  while (*s) {
    putc(*s);
    ++s;
  }
}

void count_neighbors(gol* g, neighbors* n) {
  // Initialize counts to zero
  for (int i = 0; i < 10; ++i) {
    for (int j = 0; j < 10; ++j) {
      n->count[i][j] = 0;
    }
  }
  // Count neighbors for each cell
  for (int i = 0; i < 10; ++i) {
    for (int j = 0; j < 10; ++j) {
      if (g->board[i][j]) {
        for (int di = -1; di <= 1; ++di) {
          for (int dj = -1; dj <= 1; ++dj) {
            if (di == 0 && dj == 0) {
              // Skip the cell itself
            }
            else {
              int ni = i + di;
              int nj = j + dj;
              if (ni >= 0 && ni < 10 && nj >= 0 && nj < 10) {
                ++(n->count[ni][nj]);
              }
            }
          }
        }
      }
    }
  }
}

void update_board(gol* g, neighbors* n) {
  for (int i = 0; i < 10; ++i) {
    for (int j = 0; j < 10; ++j) {
      if (g->board[i][j]) {
        if (n->count[i][j] < 2 || n->count[i][j] > 3) {
          g->board[i][j] = false;
        }
      }
      else {
        if (n->count[i][j] == 3) {
          g->board[i][j] = true;
        }
      }
    }
  }
}

void print_board(gol* g) {
  print("Current board:\n");
  if (!g) {
    print("Null board pointer!\n");
    return;
  }
  for (int i = 0; i < 10; ++i) {
    for (int j = 0; j < 10; ++j) {
      if (g->board[i][j]) {
        putc('#');
      } else {
        putc('.');
      }
    }
    putc('\n');
  }
}
void print_neighbors(neighbors* n) {
  print("Neighbor counts:\n");
  for (int i = 0; i < 10; ++i) {
    for (int j = 0; j < 10; ++j) {
      putc('0' + n->count[i][j]);
    }
    putc('\n');
  }
}

void step(gol* g) {
  neighbors n;
  count_neighbors(g, &n);
  // print_neighbors(&n);
  update_board(g, &n);
}

void main() {
  gol g;
  // Initialize a glider pattern
  g.board[1][2] = true;
  g.board[2][3] = true;
  g.board[3][1] = true;
  g.board[3][2] = true;
  g.board[3][3] = true;

  for (int generation = 0; generation < 10; ++generation) {
    print_board(&g);
    putc('\n');
    step(&g);
  }
}

